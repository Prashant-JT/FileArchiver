package com.mycompany.filearchiver;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

public class MainFrame extends javax.swing.JFrame {

    DefaultListModel fileModel = new DefaultListModel();
    JFileChooser fc = new JFileChooser();
    List<File> saveFiles = new LinkedList<>();
    File selectedFolder;
    
    private class ProgressBar extends SwingWorker<Void, Void> {
        private int progress = 0;
        
        @Override
        protected Void doInBackground() throws Exception {
            //progressBar.setValue(progress);
            Thread.sleep(100);
            return null;
        }
        
        public void setCount(int count) throws InterruptedException {
            this.progress = count;
            progressBar.setValue(progress);
            //progressBar.setValue(progress);
            //Thread.sleep(1000);
            System.out.println(progress);
        }
        
    }
    
    public MainFrame() {
        initComponents();
        listFiles.setModel(fileModel);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        progressBar.setStringPainted(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listFiles = new javax.swing.JList<>();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openOption = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        exitOption = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        zipOption = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(listFiles);

        FileMenu.setText("File");

        openOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openOption.setText("Open Folder");
        openOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOptionActionPerformed(evt);
            }
        });
        FileMenu.add(openOption);
        FileMenu.add(jSeparator);

        exitOption.setText("Exit");
        FileMenu.add(exitOption);

        jMenuBar1.add(FileMenu);

        editMenu.setText("Edit");

        zipOption.setText("Zip Files");
        zipOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipOptionActionPerformed(evt);
            }
        });
        editMenu.add(zipOption);

        jMenuBar1.add(editMenu);

        aboutMenu.setText("About");
        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setCount(int count) throws InterruptedException {
        //this.progress = count;
        progressBar.setValue(count);
        //progressBar.setValue(progress);
        //Thread.sleep(1000);
        System.out.println(count);
    }
    
    private void zipOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipOptionActionPerformed
        String savePath = "";
        //ProgressBar progressBar = new ProgressBar();
        JFileChooser fcSave = new JFileChooser();
        int res = fcSave.showSaveDialog(this);
        
        if (res == JFileChooser.APPROVE_OPTION) {
            File file = fcSave.getSelectedFile();
            int res2 = JOptionPane.showConfirmDialog(rootPane, "Are you sure?", "Save", JOptionPane.YES_NO_OPTION);
            if (res2 == JOptionPane.YES_OPTION) {
                savePath = file.getAbsolutePath();
            }else{
                return;
            }
        }
        
        try {
            BufferedInputStream origin = null;
            FileOutputStream dest = new FileOutputStream(savePath + ".zip"); // path al guardar
            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
            byte[] data = new byte[1024];
            Iterator i = saveFiles.iterator();
            
            int c = 0;
            while (i.hasNext()) {
                c++;
                System.out.println("c = " + c);
                this.setCount(((c * 100) / saveFiles.size()));
                //progressBar.execute();
                File filename = (File) i.next();
                String path = filename.getPath();
                FileInputStream fi = new FileInputStream(path);
                origin = new BufferedInputStream(fi, 1024);
                ZipEntry entry = new ZipEntry(filename.getName());
                out.putNextEntry(entry);
                
                int count;
                while ((count = origin.read(data, 0, 1024)) != -1) {
                    out.write(data, 0, count);
                }
                origin.close();
                //progressBar.setCount(((c * 100) / saveFiles.size()));
            }
            //progressBar.execute();
            out.close();
        }catch( IOException e){} catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_zipOptionActionPerformed

    private void openOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOptionActionPerformed
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION) {
            selectedFolder = fc.getSelectedFile();
            File[] listFiles = selectedFolder.listFiles();
            for (File file : listFiles) {
                if (file.isFile()) {
                    this.saveFiles.add(file);
                    this.fileModel.addElement(file.getName());
                }
            }
        }
    }//GEN-LAST:event_openOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitOption;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private javax.swing.JList<String> listFiles;
    private javax.swing.JMenuItem openOption;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem zipOption;
    // End of variables declaration//GEN-END:variables
}
